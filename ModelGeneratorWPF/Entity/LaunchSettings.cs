// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ModelGeneratorWPF.Entity;
//
//    var launchSettings = LaunchSettings.FromJson(jsonString);

namespace ModelGeneratorWPF.Entity
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class LaunchSettings
    {
        [JsonProperty("$schema")]
        public string Schema { get; set; }

        [JsonProperty("iisSettings")]
        public IisSettings IisSettings { get; set; }

        [JsonProperty("profiles")]
        public Profiles Profiles { get; set; }
    }

    public partial class IisSettings
    {
        [JsonProperty("windowsAuthentication")]
        public bool WindowsAuthentication { get; set; }

        [JsonProperty("anonymousAuthentication")]
        public bool AnonymousAuthentication { get; set; }

        [JsonProperty("iisExpress")]
        public IisExpress IisExpress { get; set; }
    }

    public partial class IisExpress
    {
        [JsonProperty("applicationUrl")]
        public string ApplicationUrl { get; set; }

        [JsonProperty("sslPort")]
        public long SslPort { get; set; }
    }

    public partial class Profiles
    {
        [JsonProperty("IIS Express")]
        public IisExpressClass IisExpress { get; set; }

        [JsonProperty("test")]
        public IisExpressClass Test { get; set; }
    }

    public partial class IisExpressClass
    {
        [JsonProperty("commandName")]
        public string CommandName { get; set; }

        [JsonProperty("launchBrowser")]
        public bool LaunchBrowser { get; set; }

        [JsonProperty("launchUrl")]
        public string LaunchUrl { get; set; }

        [JsonProperty("environmentVariables")]
        public EnvironmentVariables EnvironmentVariables { get; set; }

        [JsonProperty("applicationUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string ApplicationUrl { get; set; }
    }

    public partial class EnvironmentVariables
    {
        [JsonProperty("ASPNETCORE_ENVIRONMENT")]
        public string AspnetcoreEnvironment { get; set; }
    }

    public partial class LaunchSettings
    {
        public static LaunchSettings FromJson(string json) => JsonConvert.DeserializeObject<LaunchSettings>(json, Converter.Settings);
    }

    public partial class LaunchSettings
    {
        public string ToJson() => JsonConvert.SerializeObject(this, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
