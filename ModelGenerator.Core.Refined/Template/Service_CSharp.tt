<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
using System;
using Utilities.SQL;
using Utilities.Interfaces;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
<# if(IsNamespaceProvided) { #>
using <#= Namespace #>.Repositories;
namespace <#= Namespace #>
{
<# } #>
	public sealed class Service : IDisposable
	{
		private readonly IDatabaseConnector Connector;
		public Service(string connectionString)
		{
			Connector = new DatabaseConnector(typeof(<#= DatabaseType #>),connectionString);
		}
<# foreach(var table in Tables) { #>
<# var tableName = TableNameTransformer(table.Name); #>
<# var repositoryName = $"{tableName}Repository"; #>
		private <#= repositoryName #> _<#= tableName #> { get; set; }
		public <#= repositoryName #> <#= tableName #>
		{
			get
			{
				if(_<#= tableName #> == null)
				{
					_<#= tableName #> = new <#= repositoryName #>(Connector);
				}
				return _<#= tableName #>;
			}
		}
<# } #>
<# foreach(var sp in StoredProcedures) { #>
<# List<string> paramArgs = new List<string>();#>
<# List<string> paramFunc = new List<string>();#>
<# foreach(var param in sp.Parameters) { #>
<# paramArgs.Add($"{DataTypeMap(param.DATA_TYPE)} {param.PARAMETER_NAME}"); #>
<# } #>
<# //continue from here #>
		public dynamic <#= sp.SPECIFIC_NAME #>(<#= string.Join(",",paramArgs) #>)
		{
			var command = "<#= sp.SPECIFIC_NAME #>";
			var parameters = new List<<#= DatabaseParamType #>>();
<# foreach(var param in sp.Parameters) { #>
			parameters.Add(new <#= DatabaseParamType #>("<#= param.PARAMETER_NAME #>",<#= param.PARAMETER_NAME #>));
<# } #>
			var result = Connector.ExecuteReader(command,parameters,commandType : System.Data.CommandType.StoredProcedure);
			return result;
		}
<# } #>
        public void Dispose()
        {
            Connector?.Dispose();
        }
	}
<# if(IsNamespaceProvided) { #>
}
<# } #>
<#+
	public string Namespace {get; set;}
	public bool IsNamespaceProvided => !string.IsNullOrWhiteSpace(Namespace);
	public System.Collections.Generic.IEnumerable<ModelGenerator.Core.Entity.Table> Tables { get; set; }
	public System.Collections.Generic.IEnumerable<Utilities.Classes.StoredProcedureSchema> StoredProcedures {get;set;}
	public string DatabaseType { get; set; }
	public string DatabaseParamType { get; set ;}
	public Func<string,string> DataTypeMap { get; set; }
	public Func<string,string> TableNameTransformer {get;set;}
#>