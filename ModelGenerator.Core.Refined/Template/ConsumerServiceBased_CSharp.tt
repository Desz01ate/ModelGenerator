<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a ModelGenerator.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using Newtonsoft.Json;
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace <#= Namespace #>.Repositories.Based
{
	public class Response<T>
	{
		public bool Success { get; set; }
		public string Message { get; set; }
		public T Data { get; set; }
	}
    /// <summary>
    /// Consumer service designed for HTTP request services.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <typeparam name="TDatabase"></typeparam>
    /// <typeparam name="TParameter"></typeparam>
    public abstract partial class ConsumerService<T>
        where T : class, new()
    {
		private const string URL_PATH = "https://www.someserver.com";
        /// <summary>
        /// Constructor.
        /// </summary>
        public ConsumerService()
        {

        }
		protected abstract string ControllerName { get; }
		public async Task<Response<T>> GetAsync()
		{
			var url = $"{URL_PATH}/api/{ControllerName}";
			using (var httpClient = new HttpClient())
            {
                var request = await httpClient.GetAsync(url);
                var json = await request.Content.ReadAsStringAsync();
                var response = JsonConvert.DeserializeObject<Response<T>>(json);
                return response;
            }
		}
		public async Task<Response<T>> GetAsync(string id)
		{
			var url = $"{URL_PATH}/api/{ControllerName}/{id}";
			using (var httpClient = new HttpClient())
            {
                var request = await httpClient.GetAsync(url);
                var json = await request.Content.ReadAsStringAsync();
                var response = JsonConvert.DeserializeObject<Response<T>>(json);
                return response;
            }
		}
		public async Task<Response<T>> PostAsync(T body)
		{
			var url = $"{URL_PATH}/api/{ControllerName}";
			using (var httpClient = new HttpClient())
            {
                var content = new StringContent(JsonConvert.SerializeObject(body), Encoding.UTF8, "application/json");
                var request = await httpClient.PostAsync(url, content);
                var json = await request.Content.ReadAsStringAsync();
                var response = JsonConvert.DeserializeObject<Response<T>>(json);
                return response;
            }
		}
		public async Task<Response<T>> PatchAsync(string id,T body)
		{
			var url = $"{URL_PATH}/api/{ControllerName}/{id}";
            using (var httpClient = new HttpClient())
            {
                var content = new StringContent(JsonConvert.SerializeObject(body), Encoding.UTF8, "application/json");
                var request = await httpClient.PatchAsync(url, content);
                var json = await request.Content.ReadAsStringAsync();
                var response = JsonConvert.DeserializeObject<Response<T>>(json);
                return response;
            }
		}
		public async Task<Response<T>> DeleteAsync(string id)
		{
			var url = $"{URL_PATH}/api/{ControllerName}/{id}";
            using (var httpClient = new HttpClient())
            {
                var request = await httpClient.DeleteAsync(url);
                var json = await request.Content.ReadAsStringAsync();
                var response = JsonConvert.DeserializeObject<Response<T>>(json);
                return response;
            }
		}
    }
}

<#+
	public string Namespace {get; set;} = "YourNamespace";
#>